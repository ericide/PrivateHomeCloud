// Code generated by goctl. DO NOT EDIT!

package model

import (
	"context"
	"database/sql"
	"fmt"
	"strings"
	"time"

	"github.com/zeromicro/go-zero/core/stores/builder"
	"github.com/zeromicro/go-zero/core/stores/sqlc"
	"github.com/zeromicro/go-zero/core/stores/sqlx"
	"github.com/zeromicro/go-zero/core/stringx"
)

var (
	conversationMessageFieldNames          = builder.RawFieldNames(&ConversationMessage{})
	conversationMessageRows                = strings.Join(conversationMessageFieldNames, ",")
	conversationMessageRowsExpectAutoSet   = strings.Join(stringx.Remove(conversationMessageFieldNames, "`create_time`", "`update_time`", "`create_at`", "`update_at`"), ",")
	conversationMessageRowsWithPlaceHolder = strings.Join(stringx.Remove(conversationMessageFieldNames, "`id`", "`create_time`", "`update_time`", "`create_at`", "`update_at`"), "=?,") + "=?"
)

type (
	conversationMessageModel interface {
		Insert(ctx context.Context, data *ConversationMessage) (sql.Result, error)
		FindOne(ctx context.Context, id string) (*ConversationMessage, error)
		Update(ctx context.Context, data *ConversationMessage) error
		Delete(ctx context.Context, id string) error
	}

	defaultConversationMessageModel struct {
		conn  sqlx.SqlConn
		table string
	}

	ConversationMessage struct {
		Id         string    `db:"id"`
		ChatId     string    `db:"chat_id"`
		Type       string    `db:"type"`
		SenderId   string    `db:"sender_id"`
		Content    string    `db:"content"`
		CreateTime time.Time `db:"create_time"`
	}
)

func newConversationMessageModel(conn sqlx.SqlConn) *defaultConversationMessageModel {
	return &defaultConversationMessageModel{
		conn:  conn,
		table: "`conversation_message`",
	}
}

func (m *defaultConversationMessageModel) Delete(ctx context.Context, id string) error {
	query := fmt.Sprintf("delete from %s where `id` = ?", m.table)
	_, err := m.conn.ExecCtx(ctx, query, id)
	return err
}

func (m *defaultConversationMessageModel) FindOne(ctx context.Context, id string) (*ConversationMessage, error) {
	query := fmt.Sprintf("select %s from %s where `id` = ? limit 1", conversationMessageRows, m.table)
	var resp ConversationMessage
	err := m.conn.QueryRowCtx(ctx, &resp, query, id)
	switch err {
	case nil:
		return &resp, nil
	case sqlc.ErrNotFound:
		return nil, ErrNotFound
	default:
		return nil, err
	}
}

func (m *defaultConversationMessageModel) Insert(ctx context.Context, data *ConversationMessage) (sql.Result, error) {
	query := fmt.Sprintf("insert into %s (%s) values (?, ?, ?, ?, ?)", m.table, conversationMessageRowsExpectAutoSet)
	ret, err := m.conn.ExecCtx(ctx, query, data.Id, data.ChatId, data.Type, data.SenderId, data.Content)
	return ret, err
}

func (m *defaultConversationMessageModel) Update(ctx context.Context, data *ConversationMessage) error {
	query := fmt.Sprintf("update %s set %s where `id` = ?", m.table, conversationMessageRowsWithPlaceHolder)
	_, err := m.conn.ExecCtx(ctx, query, data.ChatId, data.Type, data.SenderId, data.Content, data.Id)
	return err
}

func (m *defaultConversationMessageModel) tableName() string {
	return m.table
}
