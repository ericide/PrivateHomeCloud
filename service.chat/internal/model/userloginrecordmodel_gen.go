// Code generated by goctl. DO NOT EDIT!

package model

import (
	"context"
	"database/sql"
	"fmt"
	"strings"
	"time"

	"github.com/zeromicro/go-zero/core/stores/builder"
	"github.com/zeromicro/go-zero/core/stores/sqlc"
	"github.com/zeromicro/go-zero/core/stores/sqlx"
	"github.com/zeromicro/go-zero/core/stringx"
)

var (
	userLoginRecordFieldNames          = builder.RawFieldNames(&UserLoginRecord{})
	userLoginRecordRows                = strings.Join(userLoginRecordFieldNames, ",")
	userLoginRecordRowsExpectAutoSet   = strings.Join(stringx.Remove(userLoginRecordFieldNames, "`create_time`", "`update_time`", "`create_at`", "`update_at`"), ",")
	userLoginRecordRowsWithPlaceHolder = strings.Join(stringx.Remove(userLoginRecordFieldNames, "`id`", "`create_time`", "`update_time`", "`create_at`", "`update_at`"), "=?,") + "=?"
)

type (
	userLoginRecordModel interface {
		Insert(ctx context.Context, data *UserLoginRecord) (sql.Result, error)
		FindOne(ctx context.Context, id string) (*UserLoginRecord, error)
		Update(ctx context.Context, data *UserLoginRecord) error
		Delete(ctx context.Context, id string) error
	}

	defaultUserLoginRecordModel struct {
		conn  sqlx.SqlConn
		table string
	}

	UserLoginRecord struct {
		Id         string    `db:"id"`
		UserId     string    `db:"user_id"`
		Device     string    `db:"device"`
		DeviceName string    `db:"device_name"`
		PushToken  string    `db:"push_token"`
		Invalid    int64     `db:"invalid"`
		CreateTime time.Time `db:"create_time"`
	}
)

func newUserLoginRecordModel(conn sqlx.SqlConn) *defaultUserLoginRecordModel {
	return &defaultUserLoginRecordModel{
		conn:  conn,
		table: "`user_login_record`",
	}
}

func (m *defaultUserLoginRecordModel) Delete(ctx context.Context, id string) error {
	query := fmt.Sprintf("delete from %s where `id` = ?", m.table)
	_, err := m.conn.ExecCtx(ctx, query, id)
	return err
}

func (m *defaultUserLoginRecordModel) FindOne(ctx context.Context, id string) (*UserLoginRecord, error) {
	query := fmt.Sprintf("select %s from %s where `id` = ? limit 1", userLoginRecordRows, m.table)
	var resp UserLoginRecord
	err := m.conn.QueryRowCtx(ctx, &resp, query, id)
	switch err {
	case nil:
		return &resp, nil
	case sqlc.ErrNotFound:
		return nil, ErrNotFound
	default:
		return nil, err
	}
}

func (m *defaultUserLoginRecordModel) Insert(ctx context.Context, data *UserLoginRecord) (sql.Result, error) {
	query := fmt.Sprintf("insert into %s (%s) values (?, ?, ?, ?, ?, ?)", m.table, userLoginRecordRowsExpectAutoSet)
	ret, err := m.conn.ExecCtx(ctx, query, data.Id, data.UserId, data.Device, data.DeviceName, data.PushToken, data.Invalid)
	return ret, err
}

func (m *defaultUserLoginRecordModel) Update(ctx context.Context, data *UserLoginRecord) error {
	query := fmt.Sprintf("update %s set %s where `id` = ?", m.table, userLoginRecordRowsWithPlaceHolder)
	_, err := m.conn.ExecCtx(ctx, query, data.UserId, data.Device, data.DeviceName, data.PushToken, data.Invalid, data.Id)
	return err
}

func (m *defaultUserLoginRecordModel) tableName() string {
	return m.table
}
