// Code generated by goctl. DO NOT EDIT!

package model

import (
	"context"
	"database/sql"
	"fmt"
	"strings"
	"time"

	"github.com/zeromicro/go-zero/core/stores/builder"
	"github.com/zeromicro/go-zero/core/stores/sqlc"
	"github.com/zeromicro/go-zero/core/stores/sqlx"
	"github.com/zeromicro/go-zero/core/stringx"
)

var (
	conversationFieldNames          = builder.RawFieldNames(&Conversation{})
	conversationRows                = strings.Join(conversationFieldNames, ",")
	conversationRowsExpectAutoSet   = strings.Join(stringx.Remove(conversationFieldNames, "`create_time`", "`update_time`", "`create_at`", "`update_at`"), ",")
	conversationRowsWithPlaceHolder = strings.Join(stringx.Remove(conversationFieldNames, "`id`", "`create_time`", "`update_time`", "`create_at`", "`update_at`"), "=?,") + "=?"
)

type (
	conversationModel interface {
		Insert(ctx context.Context, data *Conversation) (sql.Result, error)
		FindOne(ctx context.Context, id string) (*Conversation, error)
		Update(ctx context.Context, data *Conversation) error
		Delete(ctx context.Context, id string) error
	}

	defaultConversationModel struct {
		conn  sqlx.SqlConn
		table string
	}

	Conversation struct {
		Id           string    `db:"id"`
		Type         string    `db:"type"`
		ChatId       string    `db:"chat_id"`
		OwnerId      string    `db:"owner_id"`
		OppoId       string    `db:"oppo_id"`
		Name         string    `db:"name"`
		LastReadTime time.Time `db:"last_read_time"`
		CreateTime   time.Time `db:"create_time"`
	}
)

func newConversationModel(conn sqlx.SqlConn) *defaultConversationModel {
	return &defaultConversationModel{
		conn:  conn,
		table: "`conversation`",
	}
}

func (m *defaultConversationModel) Delete(ctx context.Context, id string) error {
	query := fmt.Sprintf("delete from %s where `id` = ?", m.table)
	_, err := m.conn.ExecCtx(ctx, query, id)
	return err
}

func (m *defaultConversationModel) FindOne(ctx context.Context, id string) (*Conversation, error) {
	query := fmt.Sprintf("select %s from %s where `id` = ? limit 1", conversationRows, m.table)
	var resp Conversation
	err := m.conn.QueryRowCtx(ctx, &resp, query, id)
	switch err {
	case nil:
		return &resp, nil
	case sqlc.ErrNotFound:
		return nil, ErrNotFound
	default:
		return nil, err
	}
}

func (m *defaultConversationModel) Insert(ctx context.Context, data *Conversation) (sql.Result, error) {
	query := fmt.Sprintf("insert into %s (%s) values (?, ?, ?, ?, ?, ?, ?)", m.table, conversationRowsExpectAutoSet)
	ret, err := m.conn.ExecCtx(ctx, query, data.Id, data.Type, data.ChatId, data.OwnerId, data.OppoId, data.Name, data.LastReadTime)
	return ret, err
}

func (m *defaultConversationModel) Update(ctx context.Context, data *Conversation) error {
	query := fmt.Sprintf("update %s set %s where `id` = ?", m.table, conversationRowsWithPlaceHolder)
	_, err := m.conn.ExecCtx(ctx, query, data.Type, data.ChatId, data.OwnerId, data.OppoId, data.Name, data.LastReadTime, data.Id)
	return err
}

func (m *defaultConversationModel) tableName() string {
	return m.table
}
