type (
	NullRequest {
	}

	Request {
		Name string `path:"name,options=you|me"`
	}
	IdRequest {
		Id int64 `path:"id"`
	}
	Response {
		Message string `json:"message"`
	}
	NormalListResponse {
		Count int         `json:"count"`
		Data  interface{} `json:"data"`
	}

	NormalPageRequest {
		Page    int    `form:"page"`
		Size    int    `form:"size"`
		Keyword string `form:"keyword,optional"`
	}

	MessagePageRequest {
		Page   int    `form:"page"`
		Size   int    `form:"size"`
		ChatId string `path:"chat_id"`
	}

	//login
	LoginReq {
		Username string `json:"username"`
		Password string `json:"password"`
	}

	LoginResponse {
		UserId       string `json:"user_id"`
		AccessToken  string `json:"access_token"`
		AccessExpire int64  `json:"access_expire"`
		RefreshAfter int64  `json:"refresh_after"`
	}

	GetProfileReq {
		Uid string `path:"uid"`
	}

	CreateChannelRequest {
		UserId string `json:"user_id"`
	}

	UpdateConversationLastReadTimeRequest {
		ChatId string `path:"chat_id"`
	}

	UpdatePushTokenRequest {
		PushToken string `json:"push_token"`
	}

	SendMessageRequest {
		ChatId          string `json:"chat_id"`
		MessageClientId string `json:"message_client_id"`
		Type            string `json:"type"`
		Content         string `json:"content"`
	}

	RespConversationMessage {
		Id              string                         `json:"id"`
		MessageClientId string                         `json:"message_client_id,omitempty"`
		ChatId          string                         `json:"chat_id"`
		Type            string                         `json:"type"`
		SenderId        string                         `json:"sender_id"`
		Content         RespConversationMessageContent `json:"content"`
		SendTime        int64                          `json:"send_time"`
	}

	RespConversationMessageContent {
		Text    string `json:"text,omitempty"`
		Width   int    `json:"width"`
		Height  int    `json:"height"`
		FileUri string `json:"file_uri"`
	}

	RespUser {
		Id        string `json:"id"`
		Name      string `json:"name"`
		AvatarUrl string `json:"avatar_url"`
	}

	RespConversation {
		Id           string                   `json:"id"`
		Type         string                   `json:"type"`
		ChatId       string                   `json:"chat_id"`
		OwnerId      string                   `json:"owner_id"`
		OppoUser     RespUser                 `json:"oppo_user"`
		LastMessage  *RespConversationMessage `json:"last_message"`
		UnreadCount  int                      `json:"unread_count"`
		Name         string                   `json:"name"`
		LastReadTime int64                    `json:"last_read_time"`
		CreateTime   string                   `json:"create_time"`
	}
)

service chat-api {
	@handler login
	post /user/login (LoginReq) returns (LoginResponse)
}

@server(
	jwt: Auth
	middleware: Usercheck
)

service chat-api {
	@handler updateToken
	patch /pushtoken (UpdatePushTokenRequest) returns (Response)
	
	@handler getProfile
	patch /profile/:uid (GetProfileReq) returns (RespUser)
	
	@handler getMessageList
	get /messages/:chat_id (MessagePageRequest) returns (NormalListResponse)
	
	@handler getConversationList
	get /conversations (NullRequest) returns (NormalListResponse)
	
	@handler updateLastReadTime
	patch /conversation/:chat_id/last_read_time (UpdateConversationLastReadTimeRequest) returns (Response)
	
	@handler newConversation
	post /conversation (CreateChannelRequest) returns (Response)
	
	@handler newChatMessage
	post /message (SendMessageRequest) returns (RespConversationMessage)
}